<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
	default-lazy-init="true">

	<!-- cas -->
<!-- 	<bean id="sslFilter" class="org.apache.shiro.web.filter.authz.SslFilter"> -->
<!-- 		<property name="port" value="9999" /> -->
<!-- 	</bean> -->

	<!--ehcache -->
	<bean id="ehcacheManager"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="/META-INF/spring/ehcache.xml" />
	</bean>

	<!-- 缓存管理器 -->
	<bean id="cacheManager" class="com.june.pmsys.shiro.SpringCacheManagerWrapper">
		<property name="cacheManager" ref="springCacheManager" />
	</bean>

	<!-- 凭证匹配器 -->
	<bean id="credentialsMatcher" class="com.june.pmsys.shiro.RetryLimitHashedCredentialsMatcher">
		<constructor-arg ref="cacheManager" />
		<property name="hashAlgorithmName" value="md5" />
		<property name="hashIterations" value="2" />
		<property name="storedCredentialsHexEncoded" value="true" />
	</bean>

	<!-- Realm实现 -->
	<bean id="userRealm" class="com.june.pmsys.shiro.UserRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher" />
		<property name="cachingEnabled" value="false" />
<!-- 		<property name="authenticationCachingEnabled" value="true"/> -->
<!-- 		<property name="authenticationCacheName" value="authenticationCache"/> -->
		<!--<property name="authorizationCachingEnabled" value="true"/> -->
		<!--<property name="authorizationCacheName" value="authorizationCache"/> -->
	</bean>

	<!-- anon（匿名） org.apache.shiro.web.filter.authc.AnonymousFilter authc（身份验证） 
		org.apache.shiro.web.filter.authc.FormAuthenticationFilter authcBasic（http基本验证） 
		org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter logout（退出） 
		org.apache.shiro.web.filter.authc.LogoutFilter noSessionCreation（不创建session） 
		org.apache.shiro.web.filter.session.NoSessionCreationFilter perms(许可验证) org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter 
		port（端口验证） org.apache.shiro.web.filter.authz.PortFilter rest (rest方面) org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter 
		roles（权限验证） org.apache.shiro.web.filter.authz.RolesAuthorizationFilter ssl 
		（ssl方面） org.apache.shiro.web.filter.authz.SslFilter user （用户方面） org.apache.shiro.web.filter.authc.UserFilter -->


	<!-- Shiro的Web过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login" />
		<property name="successUrl" value="/index" />
		<property name="unauthorizedUrl" value="/common/403.html" />
		<property name="filters">
			<util:map>
				<entry key="authc" value-ref="formAuthenticationFilter" />
				<!-- <entry key="sysUser" value-ref="sysUserFilter" /> -->
				<entry key="kickout" value-ref="kickoutSessionControlFilter" />
				<entry key="perms" value-ref="URLPermissionsFilter"/>
<!-- 				<entry key="ssl" value-ref="sslFilter"/>  				 -->
			</util:map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				/login = authc
				/doLogin=anon
				/logOut = logout
				/tpls/** = authc
				/druid/**=authc
				/adminlte/**=authc
				/common/**=authc
				/framework/**=authc
				/image/**=anon
				/css/**=anon
				/json/**=authc
				/js/**=anon
				<!-- 因为pom.xml 中配置jetty 需要用到,用来解决热部署静态资源被锁定 -->
				/META-INF/=anon
				/favicon.ico=anon
				/index=authc
				<!-- /index.html = authc -->
				<!-- 通过记住我或认证通过可以访问的地址 -->
				<!-- /** = kickout,user,sysUser -->
				/** = kickout,user,perms
				<!-- /** = authc 所有url都必须认证通过才可以访问 -->
				<!-- /** = authc -->
				<!-- /** = user -->
				<!-- /** = user,sysUser -->
			</value>
		</property>
	</bean>

	<!-- 暂时没搞清楚作用,所以取消 -->
	<!-- <bean id="sysUserFilter" class="com.june.pmsys.shiro.SysUserFilter" /> -->
	<bean id="URLPermissionsFilter" class="com.june.pmsys.shiro.URLPermissionsFilter" />


	<!-- 基于Form表单的身份验证过滤器 -->
	<bean id="formAuthenticationFilter"
		class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
		<property name="usernameParam" value="userName" />
		<property name="passwordParam" value="password" />
		<property name="rememberMeParam" value="rememberMe" />
	</bean>

	<!-- 最大会话次数，二者使用同一个账户登录，后者会把前者T除 -->
	<bean id="kickoutSessionControlFilter" class="com.june.pmsys.shiro.KickoutSessionControlFilter">
		<property name="cacheManager" ref="cacheManager" />
		<property name="sessionManager" ref="sessionManager" />
		<property name="kickoutAfter" value="false" />
		<property name="maxSession" value="1" />
		<property name="kickoutUrl" value="/common/kickout.html?kickout=1" />
	</bean>

	<!-- 会话ID生成器 -->
	<bean id="sessionIdGenerator"
		class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />

	<!-- 会话Cookie模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="sid" />
		<property name="httpOnly" value="true" />
		<!-- sessionIdCookie：maxAge=-1表示浏览器关闭时失效此Cookie； -->
		<property name="maxAge" value="-1" />
	</bean>

	<!-- 记住我会话保存 -->

	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMe" />
		<property name="httpOnly" value="true" />
		<property name="maxAge" value="604800" /><!-- 7天 -->
	</bean>

	<!-- rememberMe管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位） -->
		<property name="cipherKey"
			value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}" />
		<property name="cookie" ref="rememberMeCookie" />
	</bean>

	<!-- 会话DAO -->
	<bean id="sessionDAO"
		class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache" />
		<property name="sessionIdGenerator" ref="sessionIdGenerator" />
	</bean>

	<!-- 会话验证调度器 -->
	<bean id="sessionValidationScheduler"
		class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
		<property name="sessionValidationInterval" value="1800000" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>

	<!-- 会话管理器 -->
	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- session 有效时间为半小时 （毫秒单位） -->
		<property name="sessionValidationInterval" value="1800000" />  <!-- 相隔多久检查一次session的有效性 -->
		<property name="globalSessionTimeout" value="1800000" />
		<property name="deleteInvalidSessions" value="true" />
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler" />
		<property name="sessionDAO" ref="sessionDAO" />
		<property name="sessionIdCookieEnabled" value="true" />
		<property name="sessionIdCookie" ref="sessionIdCookie" />
	</bean>

	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 注入自定义Realm -->
		<property name="realm" ref="userRealm" />
		<!-- 注入session管理器 -->
		<property name="sessionManager" ref="sessionManager" />
		<!-- 注入缓存管理器 -->
		<property name="cacheManager" ref="cacheManager" />
		<!-- 记住我 -->
		<property name="rememberMeManager" ref="rememberMeManager" />
	</bean>

	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>

	<!--已配置在spring-mybatis.xml中，如果在这配置@RequiresPermissions不起作用 注解 -->
	<aop:config proxy-target-class="true"></aop:config>
	<!-- <bean -->
	<!-- class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"> -->
	<!-- <property name="securityManager" ref="securityManager" /> -->
	<!-- </bean> -->

	<!-- Shiro生命周期处理器 -->
	<!-- <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" 
		/> -->



	<!--springCacheManager -->
	<bean id="springCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehcacheManager" />
	</bean>
</beans>
