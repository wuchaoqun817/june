<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

	<!-- 默认的注解映射的支持 完成请求和注解POJO的映射 -->
	<mvc:annotation-driven />
	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<!-- <context:component-scan base-package="com.june.pmsys.controller" /> -->
	<context:component-scan base-package="com.june.pmsys.controller"
		use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!--shiro 注解 -->
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

	<!-- 处理静态资源 -->
	<!-- <mvc:resources mapping="/image/**" location="/images/" /> -->
	<!-- <mvc:resources mapping="/js/**" location="/js/" /> -->

	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" /> <!-- JSON转换器 -->
			</list>
		</property>
	</bean>

	

	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean>

	<!-- 配置了三个视图解析器，当Tiles配置中没有匹配的规则时，使用SpringMVC默认的匹配规则 ，按照order 0.1.2顺序 -->
	<!-- spring-mvc jsp视图解析器 -->
	<!-- <bean id="viewResolver" -->
	<!-- class="org.springframework.web.servlet.view.InternalResourceViewResolver"> -->
	<!-- <property name="viewClass" -->
	<!-- value="org.springframework.web.servlet.view.JstlView"></property> -->
	<!-- <property name="prefix" value="/WEB-INF/views/"></property> -->
	<!-- <property name="suffix" value=".jsp"></property> -->
	<!-- <property name="order" value="1"></property> -->
	<!-- </bean> -->

	<!-- html视图解析器 必须先配置freemarkerConfig,注意html是没有prefix前缀属性的 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="exposeRequestAttributes" value="true" />
		<property name="exposeSessionAttributes" value="true" />
		<property name="viewClass">
			<value>org.springframework.web.servlet.view.freemarker.FreeMarkerView
			</value>
		</property>
		<property name="cache">
			<value>true</value>
		</property>
		<property name="suffix">
			<value>.html</value>
		</property>
		<property name="contentType">
			<value>text/html; charset=UTF-8</value>
		</property>
	</bean>

	<bean id="freemarkerConfig"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath">
			<value>/WEB-INF/views/</value>
		</property>
		<property name="freemarkerSettings">
			<props>
				<prop key="locale">zh_CN</prop>
				<prop key="defaultEncoding">UTF-8</prop>
				<!-- <prop key="date_format">yyyy-MM-dd</prop> -->
				<!-- <prop key="time_format">HH:mm:ss</prop> -->
				<!-- <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop> -->
				<!-- <prop key="number_format">0.################</prop> -->
			</props>
		</property>
	</bean>
	
	<!-- 配置tiles模板 -->
	<!-- tilesResolver -->
	<!-- <bean id="tilesConfigurer" -->
	<!-- class="org.springframework.web.servlet.view.tiles3.TilesConfigurer"> -->
	<!-- <property name="definitions"> -->
	<!-- <list> -->
	<!-- <value>/WEB-INF/tiles.xml</value> -->
	<!-- </list> -->
	<!-- </property> -->
	<!-- <property name="preparerFactoryClass" -->
	<!-- value="org.springframework.web.servlet.view.tiles3.SpringBeanPreparerFactory" 
		/> -->
	<!-- </bean> -->
	<!-- tiles视图解释器 -->
	<!-- <bean id="tilesViewResolver" -->
	<!-- class="org.springframework.web.servlet.view.UrlBasedViewResolver"> -->
	<!-- <property name="order" value="0"></property> -->
	<!-- <property name="viewClass" -->
	<!-- value="org.springframework.web.servlet.view.tiles3.TilesView" /> -->
	<!-- </bean> -->


	<!-- 可有可无，为了测试bpm java后台代码 -->
	<!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> -->
	<!-- <property name="configLocation"> -->
	<!-- <value>classpath:spring-mybatis.xml</value> -->
	<!-- </property> -->
	<!-- <property name="dataSource"> -->
	<!-- <ref bean="dataSource" /> -->
	<!-- </property> -->
	<!-- </bean> -->
	<!-- <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"> -->
	<!-- <constructor-arg index="0" ref="sqlSessionFactory" /> -->
	<!-- </bean> -->
</beans>  