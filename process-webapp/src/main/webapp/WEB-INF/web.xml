<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/j2ee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance  http://www.springmodules.org/schema/cache/springmodules-cache.xsd http://www.springmodules.org/schema/cache/springmodules-ehcache.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee   
    http://java.sun.com/xml/ns/j2ee/web-app_2_5.xsd       
     ">
	<display-name>Archetype Created Web Application</display-name>


	<!-- shiro start -->
	<filter>
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy
		</filter-class>
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- shiro end -->

	<!-- Spring监听器 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>
	
	<!-- Spring和mybatis的配置文件 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/META-INF/spring/spring-mvc.xml,/META-INF/spring/spring-mybatis.xml
		</param-value>
	</context-param>

	<!-- 防止Spring内存溢出监听器 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener
		</listener-class>
	</listener>

	<!-- spring security start -->
	<!-- <filter> -->
	<!-- <filter-name>springSecurityFilterChain</filter-name> -->
	<!-- <filter-class>org.springframework.web.filter.DelegatingFilterProxy -->
	<!-- </filter-class> -->
	<!-- </filter> -->
	<!-- <filter-mapping> -->
	<!-- <filter-name>springSecurityFilterChain</filter-name> -->
	<!-- <url-pattern>/*</url-pattern> -->
	<!-- </filter-mapping> -->
	<!-- spring security end -->

	<!-- Spring MVC servlet -->
	<servlet>
		<servlet-name>SpringMVC</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet
		</servlet-class>
		<!-- 初始化的对象只在servlet内部可以使用。 -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/META-INF/spring/spring-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>
	<servlet-mapping>
		<servlet-name>SpringMVC</servlet-name>
		<!-- 此处可以可以配置成*.do，对应struts的后缀习惯 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!--解决中文乱码 Character Filter -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter
		</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<!-- <init-param> -->
		<!-- <param-name>forceEncoding</param-name> -->
		<!-- <param-value>false</param-value> -->
		<!-- </init-param> -->
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


	<!--spring security 获取Spring Security session的生命周期 - Publishes events for 
		session creation and destruction through the application - context. Optional 
		unless concurrent session control is being used. -->
	<listener>
		<listener-class>org.springframework.security.web.session.HttpSessionEventPublisher
		</listener-class>
	</listener>

	<!-- session超时定义,单位为分钟 -->
	<session-config>
		<session-timeout>30</session-timeout>
	</session-config>


	<!-- 添加日志监听器 -->
	<context-param>
		<param-name>logbackConfigLocation</param-name>
		<param-value>/META-INF/spring/logback.xml</param-value>
	</context-param>
	<listener>
		<listener-class>ch.qos.logback.ext.spring.web.LogbackConfigListener
		</listener-class>
	</listener>

	<!--druid WEB方式监控配置 浏览器输入 http://IP:PROT/druid 访问http://ip地址:端口号/项目名/druid/index.html -->
	<servlet>
		<servlet-name>DruidStatView</servlet-name>
		<servlet-class>com.alibaba.druid.support.http.StatViewServlet
		</servlet-class>
		<!-- 登录帐号方式校验http://host:port/appName/druid/login.html -->
        <init-param>
            <param-name>loginUsername</param-name>
            <param-value>username</param-value>
        </init-param>
        <init-param>
            <param-name>loginPassword</param-name>
            <param-value>password</param-value>
        </init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>DruidStatView</servlet-name>
		<url-pattern>/druid/*</url-pattern>
	</servlet-mapping>
	<filter>
		<filter-name>druidWebStatFilter</filter-name>
		<filter-class>com.alibaba.druid.support.http.WebStatFilter
		</filter-class>
		<!-- 经常需要排除一些不必要的url，比如.js,/jslib/等等 -->
		<!-- <init-param> -->
		<!-- <param-name>exclusions</param-name> -->
		<!-- <param-value>/adminlte/*,*.js,*.css,/druid*,*.jsp,*.swf</param-value> -->
		<!-- </init-param> -->
		<!-- 配置principalSessionName，使得druid能够知道当前的session的用户是谁。 -->
		<!-- <init-param> -->
		<!-- <param-name>principalSessionName</param-name> -->
		<!-- <param-value>sessionInfo</param-value> -->
		<!-- </init-param> -->
		<!-- 配置profileEnable能够监控单个url调用的sql列表 -->
		<init-param>
			<param-name>profileEnable</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>druidWebStatFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 解决访问不到问题 -->
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.css</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.gif</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.jpg</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.jpeg</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.png</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.js</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.eot</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.svg</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.ttf</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.woff</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.woff2</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.html</url-pattern>
	</servlet-mapping>
	
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.json</url-pattern>
	</servlet-mapping>
	<!-- jetty ico图标 -->
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.ico</url-pattern>
	</servlet-mapping>

	<welcome-file-list>
		<welcome-file>/index</welcome-file>
	</welcome-file-list>
	<!-- 第一错误页面 -->
	<!-- <error-page> -->
	<!-- <error-code>404</error-code> -->
	<!-- <location>/404.jsp</location> -->
	<!-- </error-page> -->


</web-app>
